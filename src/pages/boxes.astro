---
import DefaultLayout from '@layouts/Default.astro';
import Button from '@components/Button.astro';
import BoxCardGroup from '@components/BoxCardGroup.svelte';
import { BoxPostFrontmatter } from '../lib/Boxes';
import '../styles/global.css';

const title = 'Boxes | Secret Boxes';

const posts = await Astro.glob<BoxPostFrontmatter>('../content/**/*.md');

// First filter remove falsey values
// Map gives us the BoxMetadata from the post frontmatter
// Second filter removes Boxes with the same title
const boxesData = posts
    .filter(p => p.frontmatter.box)
    .map(p => p.frontmatter.box)
    .filter((p, index, self) => {
       return index === self.findIndex((t) => {
           return t.title === p.title
       })
    })
---
<DefaultLayout title={title}>
    <div class="w-3/5 mx-auto">
        <h2 class="font-display text-h2 tracking-1.5 mt-32 mb-2">Secrets in the box</h2>
        <p class="font-semibold tracking-0.5 text-[#575757] mb-5">Let's do this!</p>
        <p class="text-purple-100 mb-9">Secret Boxes contain the essential components for building Secret Applications.<br> 
        They include a simple web interface, a secret contract boilerplate and step-by-step tutorial!</p>
    </div>

    <div class="flex items-center justify-start w-3/5 mx-auto space-x-3 mb-4">
        <Button text="Create Boxes" route="" size="sm" kind="primary"></Button>
        <p class="text-xsm2 text-[#E3662f] tracking-[0.4px]">COMING SOON</p>
        <div class="grow text-right justify-self-end">Filter & Sort</div>
        <!-- Still need to make dropdown component! -->
    </div>

    <BoxCardGroup data={boxesData}></BoxCardGroup> 
</DefaultLayout>